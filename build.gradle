plugins {
    id 'com.github.johnrengelman.shadow' version '8.0.0'
    id 'java'
    id 'org.openjfx.javafxplugin' version '0.1.0'
}

def appVersion = '1.0.0'
println "App version: $appVersion"

group 'net.adarw'
version appVersion

repositories {
    mavenCentral()
    maven { url 'https://jitpack.io' }
}

javafx {
    version = "17.0.1"
    modules = [ 'javafx.controls', 'javafx.fxml', 'javafx.media' ]
}
shadowJar {
    archiveBaseName.set('ForexReminder')
    archiveClassifier.set('')
    archiveVersion.set(appVersion)
}

jar {
    manifest {
        attributes 'Main-Class': 'net.adarw.Main'
    }
}


dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'
    implementation "org.zeromq:jeromq:0.5.3"
    implementation 'com.google.code.gson:gson:2.10.1'
    implementation "org.json:json:20211205"
    implementation "joda-time:joda-time:2.12.1"
    implementation "com.formdev:flatlaf:3.0"
    implementation "org.apache.commons:commons-csv:1.9.0"
    implementation "org.nanohttpd:nanohttpd:2.2.0"
    implementation("com.google.guava:guava:33.2.1-jre")
    implementation "com.j256.simplemagic:simplemagic:1.17"
    implementation "org.openjfx:javafx-controls:17.0.1"
    implementation 'com.github.umjammer:jlayer:1.0.2'
    implementation "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.13.0"
    implementation group: 'commons-io', name: 'commons-io', version: '2.14.0'
    implementation group: 'net.java.dev.jna', name: 'jna', version: '5.14.0'
}

test {
    useJUnitPlatform()
}

tasks.register('run') {
    description = "Builds the project and runs the app"
    dependsOn 'build'

    doLast {
        javaexec {
            mainClass = 'net.adarw.Main'
            classpath = sourceSets.main.runtimeClasspath
        }
    }
}

def jpackageExe = 'jpackage' // assumes jpackage is in your PATH or use full path
def mainClass = 'net.adarw.Main'
def appName = 'ForexReminder'
def inputDir = "${buildDir}/libs"
def jarName = appName+"-${appVersion}.jar"
def iconWin = "src/main/resources/trayicon2.ico"
def iconLinux = "src/main/resources/trayicon2.png"

tasks.register('jpackageWindows', Exec) {
    dependsOn shadowJar
    commandLine jpackageExe,
            '--type', 'exe',
            '--input', inputDir,
            '--name', appName,
            '--main-jar', jarName,
            '--main-class', mainClass,
            '--icon', iconWin,
            '--app-version', appVersion,
            '--win-menu',
            '--win-shortcut'
}

tasks.register('jpackageLinuxDeb', Exec) {
    dependsOn shadowJar
    commandLine jpackageExe,
            '--type', 'deb',
            '--input', inputDir,
            '--name', appName,
            '--main-jar', jarName,
            '--main-class', mainClass,
            '--icon', iconLinux,
            '--app-version', appVersion
}

tasks.register('jpackageLinuxRpm', Exec) {
    dependsOn shadowJar
    commandLine jpackageExe,
            '--type', 'rpm',
            '--input', inputDir,
            '--name', appName,
            '--main-jar', jarName,
            '--main-class', mainClass,
            '--icon', iconLinux,
            '--app-version', appVersion
}
